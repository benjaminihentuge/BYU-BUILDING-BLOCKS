Study Guide: while Loops
This study guide provides a quick-reference summary of what you learned in this segment and serves as a guide for the upcoming practice quiz.  

In the while Loops segment, you learned about the logical structure and syntax of while loops. You also learned about the importance of 
initializing 
variables and how to resolve infinite while loops with the break keyword.  


while Loops
A while loop executes the body of the loop while a specified condition remains True. They are commonly used when there’s an unknown number of
 operations to be performed, and a condition needs to be checked at each iteration.

Syntax:

12
while specified condition is True:
    body of loop
Example while loop:

1234567891011121314151617181920212223242526272829
multiplier = 1
result = multiplier*5
while result <= 50:
  print(result)
  multiplier += 1
  result = multiplier*5
print("Done")

# This while loop prints the multiples of 5 between 1 and 50. The
# "multiplier" variable is initialized with the starting value of 1. 

Reset
  

Common Errors in while Loops
If you get an error message on a loop or it appears to hang, your debugging checklist should include the following checks:

Failure to initialize variables. Make sure all the variables used in the loop’s condition are initialized before the loop.

Unintended infinite loops. Make sure that the body of the loop modifies the variables used in the condition, so that the loop will 
eventually end for all possible values of the variables. 
You can often prevent an infinite loop by using the break keyword or by adding end criteria to the condition part of the while loop.

 

while Loop Terms
while loop - Tells the computer to execute a set of instructions while a specified condition is True. In other words, while loops
 keep executing the same group of instructions until the condition becomes False.

infinite loop - Missing a method for exiting the loop, causing the loop to run forever.

break - A keyword that can be used to end a loop at a specific point. 

 

Math Concepts on the Practice Quiz
The coding problems on the upcoming practice quiz will involve a few math concepts. Don’t worry if you are rusty on math.
 You will have plenty of support with these concepts on the quiz. 
The following is a quick overview of the math terms you will encounter on the quiz:  

prime numbers - Integers that have only two factors, which are the number itself multiplied by 1. The lowest prime number is 2.

prime factors - Prime numbers that are factors of an integer. For example, the prime numbers 2 and 5 are the prime factors of
 the number 10 (2x5=10). The prime factors of an integer will not produce a remainder when used to divide that integer. 

divisor - A number (denominator) that is used to divide another number (numerator). For example, if the number 10 is divided by 5,
 the number 5 is the divisor.

sum of all divisors of a number - The result of adding all of the divisors of a number together.  

multiplication table - An integer multiplied by a series of numbers and their results formatted as a table or a list. For example:

                 4x1=4
                 4x2=8
                 4x3=12
                 4x4=16
                 4x5=20


Coding skills
Skill Group 1

Initialize a variable

Use a while loop that runs while a specific condition is true

Ensure the while loop will not be an infinite loop

Increment a value within a while loop

234567891011121314151617181920212223242526272829303132333435363738394041
# This function counts the number of integer factors for a 
# "given_number" variable, passed through the function’s parameters.
# The "count" return value includes the "given_number" itself as a 
# factor (n*1). 
def count_factors(given_number):
 
  # To include the "given_number" variable as a "factor", initialize
  # the "factor" variable with the value 1 (if the "factor" variable
  # were to start at 2, the "given_number" itself would be excluded). 
  factor = 1

Reset
   

Skill Group 2

Initialize variables to assign data types before they are used in a while loop 

Use the break keyword as an exit point for a while loop

12345678910111213141516171819202122232425262728293031323334353637383940
# This function outputs an addition table. It is written to end after
# printing 5 lines of the addition table, but it will break out of the
# loop if the "my_sum" variable exceeds 20. 
 
# The function accepts a "given_number" variable through its 
# parameters.
def addition_table(given_number):
 
    # The "iterated_number" and "my_sum" variables are initialized with
    # the value of 1. Although the "my_sum" variable does not need any

Reset

  

Python practice information
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python 

Online Python Interpreter 

Create a new Repl 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket



A Closer Look at the Range() Function
The in keyword, when used with the range() function, generates a sequence of integer numbers, which can be used with a for loop to control the start point, the end point, and the incremental values of the loop.  

Syntax:

321
for n in range(x, y, z):
    print(n)

The range() function uses a set of indices that point to integer values, which start at the number 0. The numeric values 0, 1, 2, 3, 4 correlate to ordinal index positions 1st, 2nd, 3rd, 4th, 5th. So, when a range call to the 5th index position is made using range(5) the index is pointing to the numeric value of 4.

Index Number

1st index

2nd index

3rd index

4th index

5th index

Value

0

1

2

3

4

The range() function can take up to three parameters:  range(start, stop, step) 

Start 
The first item in the range() function parameters is the starting position of the range. The default is the first index position, which points to the numeric value 0. This value is included in the range. 

Stop
The second item in the range() function parameters is the ending position of the range. There is no default index position, so this index number must be given to the range() parameters. For example, the line for n in range(4) will loop 4 times with the n variable starting at 0 and looping 4 index positions: 0, 1, 2, 3. As you can see, range(4) (meaning index position 4) ends at the numeric value 3. In Python, this structure may be phrased as “the end-of-range value is excluded from the range.” In order to include the value 4 in  range(4), the syntax can be written as range(4+1) or range(5). Both of these ranges will produce the numeric values 0, 1, 2, 3, 4. 

Step
The third item in the range() function parameters is the incremental step value. The default increment is +1. The default value can be overridden with any valid increment. However, note that the loop will still end at the end-of-range index position, regardless of the incremental value. For example, if you have a loop with the range: for n in range(1, 5, 6), the range will only produce the numeric value 1. This is because the incremental value of 6 exceeded the ending point of the range.


Practice Exercise
You can use the code block below to test the values of n with various range() parameters. A few suggestions to test are:

range(stop)

range(3) 

range(3+1) 

range(start, stop)

range(2, 6)     

range(5,10+1) 

range(start, stop, step)

range(4, 15+1, 2)         

range(2*2, 25, 3+2) 

range(10, 0, -2)  

  

12
for n in range(4, 15+1, 2):  
    print(n)
Reset
4
6
8
10
12
14
  

Examples of the range() function in code:
Example 1

1234567891011121314
# This loop iterates on the value of the "n" variable in a range
# of 0 to 10 (the value of the end-of-range index 11 is excluded).
# The incremental value for the loop is 2. The print() function will 
# output the resulting value of "n" as the loop counts from 0 to 10 
# (end-of-range index 11) in incremental steps of 2. This is one 
# method that can be used in Python to print a list of even numbers.


for n in range(0,11,2):
    print(n)

Reset
0
2
4
6
8
10

 Example 2  

12345678910111213
# This loop iterates on the value of the "number" variable in a range
# of 2 to 7+1 (the value of the end-of-range index 7 is excluded, so 
# +1 has been added to the parameter to include the numeric value 7 in 
# the range). The incremental value for the loop is the default of +1.
# The print() function will output the resulting value of "number" 
# multiplied by 3.


for number in range(2,7+1):
    print(number*3)

Reset
6
9
12
15
18
21

 Example 3  

123456789101112
# This loop iterates on the value of the "x" variable in a range
# of 2 to -1 (the end-of-range index -2 is excluded). The third 
# parameter is also a negative number, making it a decremental value
# of -1. The print() function will output the resulting value of
# "x" as it starts at 2 and counts down to -1 (index -2).


for x in range(2, -2, -1):
    print(x)


Reset
2
1
0
-1

Study Guide: for Loops
This study guide provides a summary of what you learned in this segment and serves as a guide for the upcoming practice quiz.  

In the for Loops segment, you learned about the logical structure and syntax of for loops. You took a closer look at the range() function. You learned about nested for loops and complex nested for loops with if statements. You also learned how to fix common errors in for loops.


for Loops vs. while Loops
for loops and while loops share several characteristics. Both loops can be used with a variety of data types, both can be nested, and both can be used with the keywords break and continue. However, there are important differences between the two types of loops: 

while loops are used when a segment of code needs to execute repeatedly while a condition is true

for loops iterate over a sequence of elements, executing the body of the loop for each element in the sequence

Syntax 
The syntax of a for loop with the in keyword:

2
for variable in sequence:
    body of loop
Common for Loop Structures 
for Loop with range()
The in keyword with the range() function generates a sequence of integer numbers, which can be used with a for loop to configure the iterations of the code. The range of numbers [0, 1, 2] correlates to ordinal index positions (1st, 2nd, 3rd), rather than the cardinal (quantity) values of the numbers 0, 1, and 2. For example, range(5) means the five index positions in the range [0, 1, 2, 3, 4]. 

The range() function can take up to three parameters. The roles of the three possible range(x,y,z) parameters are:

x = Start - Starting index position of the range 

Default index position is 0.

The starting index position is included in the range. 

Example syntax: range(2, y, z) or range(x+3, y, z) 

y = Stop - Ending index position of range

No default index position. Must include the ending index position in the range() parameters.

Example syntax: range(y)

The value of the ending index position is excluded from the range. 

To include the ending index number, use the expression: y+1 (index + 1)

Example syntax: range(x, y+1, z)

Alternatively, if y = 10, you can write: range(x, 11, z)

z = Step - Incremental value

Default increment is +1.

The default value can be overridden with any valid increment.

The incremental value will end the for loop before it reaches the end of range index position (end of range index minus 1).  

Example of a for loop with the in keyword and the range() function:

123456789101112
# This loop iterates on the value of the "number" variable in a range
# of 1 to 6+1 (the upper range limit of 6 is excluded, so +1 has
# been added to it to include 6 in the range). The incremental value
# for the loop is 2 (number+2). The print() function will output the
# resulting value of "number" multiplied by 3.


for number in range(1,6+1,2):
    print(number*3)


Reset
3
9
15
Common pitfalls when using the range() function:
Forgetting that the upper limit of a range() isn’t included in the range.

Iterating over non-sequences. For example, strings are iterable letter by letter, but not word by word. 

12345678910
# This loop iterates on the value of the "number" variable in a range
# of 2 to 7 (the upper range limit of 8 is excluded). The print() 
# function will output the resulting value of "number" squared.


for number in range(2,8):
    print(number**2)


# The loop should print 4, 9, 16, 25, 36, 49
Reset
4
9
16
25
36
49
  

Nested for Loops 
The syntax of nested for loops:

123456789
for x in sequence:
    # start of the outer loop body
    for y in sequence:
        # start of the inner loop body

        # end of of the inner loop body
    # continue body of the outer loop
    # end of the outer loop body

 Example of nested for loops:  

12345678910111213
# This code demonstrates the outer and inner loop iterations of a pair 
# of nested for loops. Click "Run" to see the results. The outer loop
# will run twice for the range pointer positions [0, 1] in range(2).
# The inner loop will run 4 times for the range pointer positions 
# [0, 1, 2, 3] in range(3+1) or range(4) each time the outer loop runs.
# So, the inner loop will execute 8 times in total.


for x in range(2):
    print("This is the outer loop iteration number " + str(x))

Reset
  

for Loop with nested if Statement
The syntax of a for Loop with nested if Statement:

12345678
for x in sequence:
    # start of body of for loop
    if condition is true:
        # start of body of if-statement

        # end of body of if-statement
    # continue body of for loop
    # end of body of for loop
 Example of a for Loop with Nested if Statement:  

1234567891011121314
Study Guide: Week 3 Graded Quiz
It is time to prepare for the Week 3 Graded Quiz. Please review the following items from this module before beginning the Week 3 Graded Quiz. If you would like to refresh your memory on these materials, please also revisit the while Loop Study Guide and the for Loop Study Guide located before the Practice Quizzes in Week 3. You will not be tested on the Recursion lesson content, which is optional in this module.


Knowledge
Terms
variables - Know how to properly initialize or increment a variable. You will also need to recognize a coding error due to the failure to properly initialize or increment a variable.

infinite loops - Know how to recognize infinite loops and use common solutions to prevent them. For example, check loop conditions, ranges, iterators, control statements, etc. to ensure that at least one of these controls are in place to prevent an infinite loop.

iterators - Know the various options available for iterating a variable (e.g., using assignment operators, using the third range() function parameter). You will also need to analyze where the iteration should occur. A misplaced iterator could produce the wrong output or create an infinite loop.  

control statements - Know how and when to use the break and continue control statements to prevent infinite loops.  


Common Functions
range() Function Parameters - Know the roles of the three possible range(x, y, z) function parameters:

x Start of Range (included)

y End of Range (excluded index) 

To include the end of range index, use the expression y+1

The end of range must be included in the range() parameters.

z Incremental value

Example 1: range(4, 12+1, 2)

This example creates a range that starts at 4 and ends at 12 (without the +1, the range would end at 11). 

The third parameter increments the range iteration by 2, as opposed to the default increment of 1. The  range(4, 12+1, 2) expression would produce the values: 4, 6, 8, 10, 12 

Example 2: range(10, 2-1, -2)

This example creates a range that starts at 10 and ends at 2-1, with a decremental value of -2. When counting down, to include the value of the end of the range index, use -1 (end of range minus 1). This range produces the sequence: 10, 8, 6, 4, 2 


print() Function Default Behavior - Know the default behavior of the print() function is to insert a new line character after the print statement runs.

To override the insertion of the new line character and replace it with a space, add end=" " as the last item in the print() parameters. This makes it possible to add the next print output to the same line, separated by a space. You might use this technique when a print() function is part of a for or while loop. Example syntax:  print(x+1, end=" ")

Coding Skills
Skill 1: Using for loops with the range() function

Use a for loop with the range() function with the end-of-range value included in the range.

1234567891011121314151617181920212223242526272829
# This function will accept an integer variable "end" and count by 10
# from 0 to the "end" value.
def count_by_10(end):
    # Initializeq the "count" variable as a string.
    count = ""

    # The range function parameters instruct Python to start the count  
    # at 0 and stop at the variable given as the upper end of the range. 
    # Since the value of the high end of a range is excluded by default,  
    # you can make Python include the "end" value by adding +1 to it. 

Reset
    

Use a set of nested for loops with the range() function to create a matrix of numbers. 

Include the upper range value in the range() function using end+1.

12345678910111213141516171819202122232425262728293031323334353637383940
# This function uses a set of nested for loops with the range() function 
# to create a matrix of numbers. The upper range value in the range() 
# function should be included in the matrix. The matrix should consist 
# of a set of numbers that fill both rows and columns.
def matrix(initial_number, end_of_first_row):


    # It is an optional code style to assign the long variable names in the
    # function parameters to shorter variable names. 
    n1 = initial_number 

Reset

 Predict the final value of a nested for loop with range() functions.  

12345678910111213141516
# For this example, the outer for loop uses an end of range index of 
# 10. The value of index 10 will be 10-1, or 9.  
for outer_loop in range(10):

    # Using the "outer_loop" variable as the end of range for the  
    # inner loop, means the end of range index will be 9. The value 
    # of index 9 will be 9-1, or 8.
    for inner_loop in range(outer_loop):

        # The printed result is the value of "inner_loop". Since  

Reset
  

Find and fix an error in a for loop with range() function.  

123456789101112131415161718192021222324
# This function should count down by -2 from 11 to 1, so that it only
# prints odd numbers. 

# This range(11, -2) tells the for loop to start at 11 and end at index
# position -2 (which corresponds to the numeric value of -1). Since the
# third incremental or decremental value is missing, the loop will 
# increment by the default of +1 instead of the intended -2 decrement.
# Starting at index position 11 and incrementing by +1 will end the loop 
# automatically, because the index is not countin
Reset

Skill 2: Using while loops
Use a while loop to print a sequence of numbers .

123456789101112131415161718
# For this example, the while loop will count down by threes starting 
# from 18 and ending at 0.
starting_number = 18

# The while loop will continue to loop until it reaches 0.
while starting_number >= 0:

    # To make the sequence of numbers easier to read, include a space
    # between each number in the sequence. You can override the default 
    # behavior of the print() function by using the "end=" parameter with

Reset
 

 Use a while loop to count the number of digits in a numerical value   

12345678910111213141516171819202122232425262728293031323334353637383940
# This function accepts a CEO's salary as a variable. 
# It counts the number of digits in the salary and 
# returns the sentence like:
# "The CEO has a 6-figure salary."
def X_figure(salary):
    
    # Initializes the counter as an integer.
    tally = 0

    # The if-statement checks if the variable "salary" 

Reset
  

Skill 3: Using while loops with if-else statements
Use a function to accept two variable integers. 

Use nested if-else statements and while loops to count up or count down from the first variable to the second variable.  

12345678910111213141516171819202122232425262728293031323334353637383940
# This function will accept two integer variables: the floor
# number that a passenger "enter"s an elevator and the floor
# number the passenger is going to "exit". Then, the function
# counts up or down from the two floor numbers.
def elevator_floor(enter, exit):
    # The "floor" variable will be used as a counter and to  
    # print the floor numbers. The "elevator_direction"
    # variable will hold the string "Going up: " or 
    # "Going down: " plus the count up or down of the 
    # "fl
Reset

  

Reminder: Correct syntax is critical
Using precise syntax is critical when writing code in any programming language, including Python. Even a small typo can cause a syntax error and the automated Python-coded quiz grader will mark your code as incorrect. This reflects real life coding errors in the sense that a single error in spelling, case, punctuation, etc. can cause your code to fail. Coding problems caused by imprecise syntax will always be an issue whether you are learning a programming language or you are using programming skills on the job. So, it is critical to start the habit of being precise in your code now. 

No credit will be given if there are any coding errors on the automated graded quizzes - including minor errors. Fortunately, you have 3 optional retake opportunities on the graded quizzes in this course. Additionally, you have unlimited retakes on practice quizzes and can review the videos and readings as many times as you need to master the concepts in this course.  

Now, before starting the graded quiz, please review this list of common syntax errors coders make when writing code.

Common syntax errors:
Misspellings

Incorrect indentations

Missing or incorrect key characters:

Parenthetical types - ( curved ), [ square ], { curly }

Quote types - "straight-double" or 'straight-single', “curly-double” or ‘curly-single’

Block introduction characters, like colons - :

Data type mismatches

Missing, incorrectly used, or misplaced Python reserved words

Using the wrong case (uppercase/lowercase) - Python is a case-sensitive language 